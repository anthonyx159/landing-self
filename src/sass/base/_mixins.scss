@mixin responsive-width($media) {
    @media only screen and (min-width: $media) {
        @content;
    }
}

@mixin responsive-max-width($media) {
    @media only screen and (max-width: $media) {
        @content;
    }
}

@mixin backgound_retina {
    @media (-webkit-min-device-pixel-ratio: 2),
    (min-resolution: 192dpi) {
        @content;
    }
}

@function str-split($string, $separator) {
    $i: str-index($string, $separator);

    @if $i !=null {
        @return append(str-slice($string, 1, $i - 1),
            str-split(str-slice($string, $i + str-length($separator)), $separator));
    }

    @return $string
}

;

@function add-class-modifier($class, $split: '--') {
    @return str-insert(nth(str-split(#{&}, $split), 1), $class, -1);
}

;

@mixin placeholder {
    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder {
        /* Firefox 18- */
        @content;
    }

    &::-moz-placeholder {
        /* Firefox 19+ */
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }

    &::placeholder {
        @content;
    }
}

@function m_image_common_url($url) {
    @if function-exists(image-url) {
        @return image-url($url);
    }

    @else {
        @return url($m_image_common_path + $url);
    }
}

@function m_image_url($url) {
    @if function-exists(image-url) {
        @return image-url($url);
    }

    @else {
        @return url($m_image_path + $url);
    }
}

@mixin grid-table($alineacion:top) {
    display: table;
    width: 100%;
    height: 1px;

    >* {
        display: table-cell;
        vertical-align: $alineacion;
    }
}

@mixin inline-block-sin-espacios($size: $font-size-default, $align: top) {
    font-size: 0;
    letter-spacing: -1px;
    word-spacing: -1px;

    >* {
        font-size: $font-size-default;
        letter-spacing: $letter-spacing;
        white-space: normal;
        word-spacing: normal;
        display: inline-block;
        vertical-align: $align;
    }
}

@function map-get-strict($map, $key) {
    @if map-has-key($map, $key) {
      @return map-get($map, $key);
    }

    @else {
      @error 'ERROR: Specified index does not exist in map #{$map}, with value: #{$key}';
    }
}

@function global-settings($keys...) {
    $global-variables: null !default;

    @if $global-variables != null {
      $value: $global-variables;

      @each $key in $keys {
        $value: map-get-strict($value, $key);
      }

      @return $value;
    }

    @else {
      @error 'ERROR: $global-settings variable doesnt exist!';
    }
  }

@function map-get-deep($map, $keys...) {
    $value: $map;

    @each $key in $keys {
      @if map-has-key($value, $key) {
        $value: map-get($value, $key);
      }

      @else {
        @error 'ERROR: Specified index does not exist in map #{$map}, with value: #{$key}';
      }
    }

    @return $value;
  }

@function map-reverse($map) {
  $result: null;

  @if type-of($map) == 'map' {
    $keys: map-keys($map);
    $map-reversed: ();

    @for $i from length($keys) through 1 {
      $map-reversed: map-merge($map-reversed, (nth($keys, $i): map-get($map, nth($keys, $i))));
    }

    @if type-of($map-reversed) == 'map' {
      $result: $map-reversed;
    }

    @else {
      @warn 'There was an error reversing the order of "#{$map}"';
    }
  }

  @else {
    @warn '"#{$map}" is not a valid map';
  }

  @return $result;
}


%button-reset {
    padding: 0;
    border: 0;
    appearance: none;
    font-family: inherit;

    &:focus {
      outline: none;
    }
}
